public class MinPriorityQueue<T extends Comparable<T>> {
    T[] pq;
    private int n;

    // Initialize heap with a capacity
    public MinPriorityQueue(int capacity) {
        pq = (T[]) new Comparable[capacity];
        n = 0;
    }

    public boolean isEmpty() {
        return n == 0;
    }

    public int size() {
        return n;
    }

    public void insert(T x) {
        if (n == pq.length) resize(2 * pq.length); // Resize if needed
        pq[n] = x;
        swim(n);
        n++;
    }

    public T delMin() {
        if (isEmpty()) throw new IllegalStateException("Priority queue is empty");
        T min = pq[0]; // Root element
        exch(0, --n); // Swap root with last element and decrease size
        pq[n] = null; // Avoid loitering
        sink(0); // Restore heap order
        return min;
    }

    private void swim(int k) {
        while (k > 0 && less(k, (k - 1) / 2)) {
            exch(k, (k - 1) / 2);
            k = (k - 1) / 2;
        }
    }

    private void sink(int k) {
        while (2 * k + 1 < n) {
            int j = 2 * k + 1;
            if (j < n - 1 && less(j + 1, j)) j++;
            if (!less(j, k)) break;
            exch(k, j);
            k = j;
        }
    }

    private boolean less(int i, int j) {
        return pq[i].compareTo(pq[j]) < 0;
    }

    private void exch(int i, int j) {
        T swap = pq[i];
        pq[i] = pq[j];
        pq[j] = swap;
    }

    private void resize(int capacity) {
        T[] temp = (T[]) new Comparable[capacity];
        System.arraycopy(pq, 0, temp, 0, n);
        pq = temp;
    }
}
