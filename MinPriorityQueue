public class MinPriorityQueue<T extends Comparable<T>> {
    private T[] pq;
    private int n;

    // Initialize with an initial capacity
    public MinPriorityQueue() {
        pq = (T[]) new Comparable[2]; // Start with small initial size
        n = 0;
    }

    public boolean isEmpty() { 
        return n == 0; 
    }
    
    public int size() { 
        return n; 
    }

    public void insert(T x) {
        if (n == pq.length - 1) {  // Check if resizing is needed
            resize(2 * pq.length);
        }
        pq[++n] = x; // Insert at the next available position
        swim(n);
    }

    public T delMin() {
        if (isEmpty()) {
            throw new IllegalStateException("Priority queue is empty");
        }

        T min = pq[1]; // Get the min (root)
        exch(1, n--); // Swap the last element with the root and decrease size
        pq[n + 1] = null; // Avoid loitering
        sink(1); // Restore heap order by sinking the new root
        
        if ((n > 0) && (n == (pq.length - 1) / 4)) {  // Shrink array if it's a quarter full
            resize(pq.length / 2);
        }

        return min;
    }

    private void swim(int k) {
        while (k > 1 && less(k, k / 2)) {
            exch(k, k / 2);
            k = k / 2;
        }
    }

    private void sink(int k) {
        while (2 * k <= n) {
            int j = 2 * k;
            if (j < n && less(j + 1, j)) {
                j++;
            }
            if (!less(j, k)) {
                break;
            }
            exch(k, j);
            k = j;
        }
    }

    // Helper functions
    private boolean less(int i, int j) {
        return pq[i].compareTo(pq[j]) < 0;
    }

    private void exch(int i, int j) {
        T swap = pq[i];
        pq[i] = pq[j];
        pq[j] = swap;
    }

    // Resize the underlying array
    private void resize(int capacity) {
        T[] temp = (T[]) new Comparable[capacity];
        for (int i = 1; i <= n; i++) {
            temp[i] = pq[i];
        }
        pq = temp;
    }
}
