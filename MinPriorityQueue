public class MinPriorityQueue<T extends Comparable<T>>{
    T [] pq;
    private int n;

    // set inititial size of heap to hold size elements
    public MinPriorityQueue(int capacity) {
        pq = (T[]) new Comparable[capacity+1];
        n = 0;
    }

    public boolean isEmpty()   { return n == 0; }
    public int size()          { return n;      }
    public void insert(T x)  { pq[n++] = x;   }

    public T delMin() {
        T min = pq[1]; // Get the min (root)
        exch(1, n--); // Swap the last element with the root and decrease size
        pq[n + 1] = null; // Avoid loitering
        sink(1); // Restore heap order by sinking the new root
        return min;
    }

    public void swim(int k){
        while(k>1 && less(k/2, k)){
            exch(k, k/2);
            k = k/2;
        }
    }

    public void sink(int k){
        while(2*k <= n){
            int j = 2*k;
            if(j < n && less(j, j+1)){
                j++;
            }
            if(!less(k,j)){
                break;
            }
            exch(k,j);
            k=j;
        }
    }

    // helper functions
    public boolean less(int i, int j) {
        return pq[i].compareTo(pq[j]) < 0;
    }

    public void exch(int i, int j) {
        T swap = pq[i];
        pq[i] = pq[j];
        pq[j] = swap;
    }
}

